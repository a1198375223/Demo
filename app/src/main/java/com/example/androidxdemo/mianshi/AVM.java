package com.example.androidxdemo.mianshi;

/**
 * Android虚拟机
 * a. 基于栈的虚拟机和基于寄存器的虚拟器有什么区别？
 * 1. 基于栈的架构具有更好的可移植性，因为其实现不依赖于物理寄存器
 * 2. 基于栈的架构通常指令更短，因为其操作不需要指定操作数和结果的地址
 * 3. 基于寄存器的架构通常运行速度更快，因为有寄存器的支撑
 * 4. 基于寄存器的架构通常需要较少的指令来完成同样的运算，因为不需要进行压栈和出栈
 *
 * b. Dalvik虚拟机的启动过程
 * 1. zygote进程来启动Dalvik虚拟机
 * 2. 注册Android Framework类相关的JNI方法
 * 3. 查找入口类的定义
 * 4. 调用入口类的main方法
 * 5. 处理虚拟机推出前执行的逻辑
 *
 * c. Dalvik虚拟机垃圾回收机制
 * 1. 在开始垃圾回收之前，要暂停所有线程的执行
 * 2. 创建GC标记的上下文
 * 3. 对GC的根对象进行标记
 * 4. 然后以此为起点进行对象的追踪
 * 5. 处理引用关系
 * 6. 执行清理
 * 7. 完成标记工作
 * 8. 恢复所有线程的执行
 *
 * Dalvik虚拟机:
 * 1. 基于栈的虚拟机: 每一个运行时的线程都有一个独立的栈。
 * 2. 多个 Class 文件融合进一个 Dex 文件中，以节省内存空间
 * 3. Dex 文件可以在多个进程之间共享
 * 4. 在应用程序运行之前完成字节码的检验操作，因为检验操作十分耗时
 * 5. JIT在运行时进行代码的编译
 *
 *
 * ART虚拟机
 * 1. AOT编译（AOT编译是在应用程序安装时就进行的工作）
 * 2. 垃圾回收的改进
 */
public class AVM {
}
